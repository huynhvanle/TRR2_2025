#include <bits/stdc++.h>
#define all(x) x.begin(), x.end()
using namespace std;

int n;
int a[101][101];
int check[101];

set<int> pillar;

void reset_check(){
    for(int i = 1; i <= n; i++)
        check[i] = 0;
}

void dfs(int u){
    stack<int> s;
    s.push(u);
    check[u] = 1;
    while(!s.empty()){
        int i = s.top();
        s.pop();
        for(int j = 1; j <= n; j++){
            if(!check[j] && a[i][j]){
                check[j] = 1;
                s.push(i);
                s.push(j);
                break;
            }
        }
    }
}

int count_components(){
    int cnt = 0;
    for(int i = 1; i <= n; i++){
        if(!check[i]){
            cnt++;
            dfs(i);
        }
    }
    return cnt;
}

void find_pillar(){
    int original_components = count_components();
    for(int i = 1; i <= n; i++){
        reset_check();
        check[i] = 1;
        int new_components = count_components();
        if(new_components > original_components)
            pillar.insert(i);
    }
    cout << pillar.size() << endl;
    for(int x : pillar)
        cout << x << " ";
}

int main() {
    freopen("TK.INP", "r", stdin);
    freopen("TK.OUT", "w", stdout);
    cin >> n;
    for(int i = 1; i <= n; i++)
        for(int j = 1; j <= n ; j++)
            cin >> a[i][j];
    find_pillar();
}
