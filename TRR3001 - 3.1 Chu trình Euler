#include <bits/stdc++.h>
#define all(x) x.begin(), x.end()
using namespace std;

int t, n, u;
int a[101][101];
int check[101];

void dfs(){
    stack<int> s;
    s.push(1);
    check[1] = 1;
    while(!s.empty()){
        int i = s.top();
        s.pop();
        for(int j = 1; j <= n; j++){
            if(a[i][j] && !check[j]){
                s.push(i);
                s.push(j);
                check[j] = 1;
                break;
            }
        }
    }
}

bool check_connected(){
    dfs();
    for(int i = 1; i <= n; i++)
        if(!check[i])
            return 0;
    return 1;
}

void check_euler(){
    if(check_connected()){
        int odd_level = 0;
        for(int i = 1; i <= n; i++){
            int level = 0;
            for(int j = 1; j <= n; j++){
                if(a[i][j])
                    level++;
            }
            if(level % 2 != 0)
                odd_level++;
            if(odd_level > 2)
                break;
        }
        if(odd_level == 0) cout << 1;
        else if(odd_level == 2) cout << 2;
        else cout << 0;
    }else
        cout << 0;
}

void find_euler_cycle(){
    vector<int> CE;
    stack<int> s;
    s.push(u);
    while(!s.empty()){
        int i = s.top();
        bool ok = 0;
        for(int j = 1; j <= n; j++){
            if(a[i][j]){
                s.push(j);
                ok = 1;
                a[i][j] = a[j][i] = 0;
                break;
            }
        }
        if(!ok){
            s.pop();
            CE.push_back(i);
        }
    }
    reverse(all(CE));
    for(int x : CE)
        cout << x << " ";
}

int main() {
    freopen("CT.INP", "r", stdin);
    freopen("CT.OUT", "w", stdout);
    cin >> t >> n;
    if(t == 2) cin >> u;
    for(int i = 1; i <= n; i++)
        for(int j = 1; j <= n; j++)
            cin >> a[i][j];
    if(t == 1){
        check_euler();
    }else if(t == 2){
        find_euler_cycle();
    }
    return 0;
}
